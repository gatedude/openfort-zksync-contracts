import { utils, Wallet } from "zksync-ethers";
import { task } from "hardhat/config"
import { randomBytes } from "ethers";
import { fromBytes } from "viem/utils";


task("deploy-factory", "Deploy an Openfort Factory")
    .addFlag("verify", "Verify the contract code on explorer")
    .addOptionalParam("account", "The account implementation address")
    .addOptionalParam("salt", "Salt for create2 deployment")
    .setAction(async (args, hre) => {
        const contractArtifactName = "UpgradeableOpenfortFactory";
        const proxyArtifactName = "UpgradeableOpenfortProxy";
        const factoryArtifact = await hre.deployer.loadArtifact(contractArtifactName);
        const proxyArtifact = await hre.deployer.loadArtifact(proxyArtifactName);

        // Private key of the account used to deploy
        const wallet = new Wallet(hre.network.config.accounts[0]);

        const RECOVERY_PERIOD = 2 * 24 * 60 * 60; // 2 days in seconds
        const SECURITY_PERIOD = 1.5 * 24 * 60 * 60; // 1.5 days in seconds
        const SECURITY_WINDOW = 0.5 * 24 * 60 * 60; // 0.5 days in seconds
        const LOCK_PERIOD = 5 * 24 * 60 * 60; // 5 days in seconds

        if (!args.account) {
            args.account = await hre.run("deploy-account", { verify: args.verify })
        }

        // https://docs.zksync.io/zk-stack/components/zksync-evm/bootloader#bytecode-hashes
        // Bytecode of UpgradeableOpenfortProxy SHOULD be constant no matter the BaseOpenfortAccount.sol update.

        // Something looks wrong with the build system because dynamically reading the proxy bytecode `proxyArtifact.bytecode` gives a wrong value.
        // proxyBytecodeHash SHOULD ALWAYS BE === 0x010000a54c9de7cae403cb015684edcf24a518b73a06ef7ac6ea5da27134f3e0
        const proxyBytecode = "";
        const proxyBytecodeHash = "0x010000a54c9de7cae403cb015684edcf24a518b73a06ef7ac6ea5da27134f3e0";

        // DEBUG
        console.log("Correct proxy bytecode hash: ", proxyBytecodeHash)
        // proxyArtifact.bytecode != proxyBytecode
        console.log("Wrong computed proxy bytecode hash: ", Buffer.from(utils.hashBytecode(proxyArtifact.bytecode)).toString('hex'))

        const constructorArguments = [
            wallet.address,
            proxyBytecodeHash,
            args.account,
            RECOVERY_PERIOD,
            SECURITY_PERIOD,
            SECURITY_WINDOW,
            LOCK_PERIOD,
            wallet.address,
        ]

        const salt = args.salt ?? fromBytes(randomBytes(32), 'hex');
        const contract = await hre.deployer.deploy(factoryArtifact,
            constructorArguments,
            "create2",
            {
                // fill paymaster params for sophon, leave empty .
                customData: !hre.network.config.url.includes("sophon") ? {salt} : {
                    salt,
                    paymasterParams: utils.getPaymasterParams(
                        process.env.SOPHON_TESTNET_PAYMASTER_ADDRESS!,
                        {
                            type: "General",
                            innerInput: new Uint8Array(),
                        }),
                    gasPerPubdata: utils.DEFAULT_GAS_PER_PUBDATA_LIMIT,
                },
            },
            [proxyBytecode] // additional factory deps
        );

        const FACTORY_ADDRESS = await contract.getAddress();
        console.log(`Factory deployed to: ${FACTORY_ADDRESS}`);
        if (args.verify) {
            const fullContractSource = `${factoryArtifact.sourceName}:${factoryArtifact.contractName}`;
            // verification of implementation contract always fail
            // because it has already been verified
            // on failure: print error and do nothing
            // don't do that in production code, only in test setup
            try {
                await hre.run("verify:verify", {
                    address: FACTORY_ADDRESS,
                    constructorArguments: [],
                    contract: fullContractSource,
                    noCompile: true,
                });
            } catch (e) {
                console.log(e)
            }
        }
        return {
            factory: FACTORY_ADDRESS,
            implementation: args.account
        }
    });